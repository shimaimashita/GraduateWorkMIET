import uuid

from django.db import models
from django.urls import reverse


class Question(models.Model):
    """Model representing a question."""
    pk_question = models.UUIDField(primary_key=True, default=uuid.uuid4,
                                   help_text='Unique ID for this particular question')
    question = models.TextField(max_length=1000, help_text='Enter a question')

    def __str__(self):
        """String for representing the Model object."""
        return self.question

    def get_absolute_url(self):
        """Returns the URL to access a particular author instance."""
        return reverse('author-detail', args=[str(self.pk_question)])



class Mailing(models.Model):
    pk_mailing = models.UUIDField(primary_key=True, default=uuid.uuid4)
    question = models.ManyToManyField('Question')
    mailing_date = models.DateField()
    ACTIVE_STATUS = (
        ('a', 'Active'),
        ('i', 'Inactive'),
    )

    status = models.CharField(
        max_length=1,
        choices=ACTIVE_STATUS,
        blank=True,
        default='i',
    )
    institute = models.ForeignKey('Institute', on_delete=models.RESTRICT)

    class Meta:
        ordering = ['-mailing_date']

    def __str__(self):
        return f'{self.pk_mailing} mailing'

    def print_all_question(self):
        return ', '.join(question.question for question in self.question.all()[:4])

    def set_status(self):
        pass

    def get_status(self):
        pass


class Institute(models.Model):
    pk_institute = models.UUIDField(primary_key=True, default=uuid.uuid4)
    institute_name = models.CharField(max_length=30)

    class Meta:
        ordering = ['-institute_name']

    def __str__(self):
        return f'{self.institute_name}'


class Faculty(models.Model):
    pk_faculty = models.UUIDField(primary_key=True, default=uuid.uuid4)
    faculty_name = models.CharField(max_length=30)
    institute = models.ForeignKey('Institute', on_delete=models.RESTRICT)

    class Meta:
        ordering = ['-faculty_name']

    def print_all_groups(self):
        ', '.join(faculty.faculty_name for faculty in self.faculty_name[:4])

    def __str__(self):
        return f'{self.faculty_name}'

    def print_full_name(self):
        pass


class Group(models.Model):
    pk_group = models.UUIDField(primary_key=True, default=uuid.uuid4)
    group_name = models.CharField(max_length=30)
    faculty = models.ForeignKey('Faculty', on_delete=models.RESTRICT)

    def __str__(self):
        return f'{self.group_name}'

    def get_absolute_url(self):
        return reverse('group-detail', args=[str(self.pk_group)])


class Student(models.Model):
    pk_student = models.UUIDField(primary_key=True, default=uuid.uuid4)
    group = models.ForeignKey('Group', on_delete=models.RESTRICT)
    status = models.CharField(max_length=30)

    STUDY_STATUS = (
        ('s', 'Study'),
        ('g', 'Graduate'),
    )

    status = models.CharField(
        max_length=1,
        choices=STUDY_STATUS,
        blank=True,
        default='s',
    )

    mail = models.CharField(max_length=50)
    graduate_year = models.DateField()

    def get_absolute_url(self):
        return reverse('student-detail', args=[str(self.pk_student)])

    def __str__(self):
        return f'{self.group} {self.status}'


class Result(models.Model):
    pk_result = models.UUIDField(primary_key=True, default=uuid.uuid4)
    graduate_number = models.IntegerField()
    answer_number = models.IntegerField()
    causes = models.IntegerField()
    coefficient = models.FloatField()
    employed = models.IntegerField()
    graduate_year = models.DateField()
    mailing = models.ManyToManyField('Mailing')

    class Meta:
        ordering = ['pk_result']

    def __str__(self):
        return f'{self.graduate_year}'

    def get_absolute_url(self):
        return reverse('result-detail', args=[str(self.pk_result)])

    def print_all_mailing(self):
        return ', '.join(mailing.mailing_date for mailing in self.mailing.all()[:4])

# class Book(models.Model):
#     """Model representing a book (but not a specific copy of a book)."""
#     title = models.CharField(max_length=200)
#
#     # Foreign Key used because book can only have one author, but authors can have multiple books
#     # Author as a string rather than object because it hasn't been declared yet in the file
#     author = models.ForeignKey('Author', on_delete=models.SET_NULL, null=True)
#
# summary = models.TextField(max_length=1000, help_text='Enter a brief description of the book') isbn =
# models.CharField('ISBN', max_length=13, unique=True, help_text='13 Character <a
# href="https://www.isbn-international.org/content/what-isbn">ISBN number</a>')
#
#     # ManyToManyField used because genre can contain many books. Books can cover many genres.
#     # Genre class has already been defined so we can specify the object above.
#     genre = models.ManyToManyField(Genre, help_text='Select a genre for this book')
#     language = models.ForeignKey(Language, on_delete=models.SET_NULL, null=True)
#
#     def __str__(self):
#         """String for representing the Model object."""
#         return self.title
#
#     def get_absolute_url(self):
#         """Returns the URL to access a detail record for this book."""
#         return reverse('book-detail', args=[str(self.id)])
#
#     def display_genre(self):
#         """Returns list of genres of book, separeted by coma."""
#         return ', '.join(genre.name for genre in self.genre.all()[:3])
#
#     display_genre.short_description = 'Genre'

# class Author(models.Model):
#     """Model representing an author."""
#     first_name = models.CharField(max_length=100)
#     last_name = models.CharField(max_length=100)
#     date_of_birth = models.DateField(null=True, blank=True)
#     date_of_death = models.DateField('Died', null=True, blank=True)
#
#     class Meta:
#         ordering = ['last_name', 'first_name']
#
#     def get_absolute_url(self):
#         """Returns the URL to access a particular author instance."""
#         return reverse('author-detail', args=[str(self.id)])
#
#     def __str__(self):
#         """String for representing the Model object."""
#         return f'{self.last_name}, {self.first_name}'

# class BookInstance(models.Model):
#     """Model representing a specific copy of a book (i.e. that can be borrowed from the library)."""
#     id = models.UUIDField(primary_key=True, default=uuid.uuid4, help_text='Unique ID for this particular book across whole library')
#     book = models.ForeignKey('Book', on_delete=models.RESTRICT, null=True)
#     imprint = models.CharField(max_length=200)
#     due_back = models.DateField(null=True, blank=True)
#     language = models.ForeignKey('Language', on_delete=models.RESTRICT, null=True)
#
# LOAN_STATUS = (
#     ('m', 'Maintenance'),
#     ('o', 'On loan'),
#     ('a', 'Available'),
#     ('r', 'Reserved'),
# )
#
# status = models.CharField(
#     max_length=1,
#     choices=LOAN_STATUS,
#     blank=True,
#     default='m',
#     help_text='Book availability',
# )
#
#     class Meta:
#         ordering = ['due_back']
#
#     def __str__(self):
#         """String for representing the Model object."""
#         return f'{self.id} ({self.book.title})'
from django.shortcuts import render

from .models import Mailing, Question, Faculty, Group, Student, Result


def index(request):
    """View function for home page of site."""

    # Generate counts of some of the main objects
    num_of_answers = 10
    num_of_completed_mailing = 1
    all_faculties = ' ,'.join(faculty.faculty_name for faculty in Faculty.objects.all())
    all_groups = ' ,'.join(group.group_name for group in Group.objects.all())

    context = {
        'num_of_answers': num_of_answers,
        'num_of_completed_mailing': num_of_completed_mailing,
        'all_faculties': all_faculties,
        'all_groups': all_groups
    }

    # Render the HTML template index.html with the data in the context variable
    return render(request, 'index.html', context=context)
<!DOCTYPE html>
<html lang="en">
<head>
  {% block title %}<title>Local Library</title>{% endblock %}
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
  <!-- Add additional CSS in static file -->
  {% load static %}
  <link rel="stylesheet" href="{% static 'css/styles.css' %}">
</head>
<body>
  <div class="container-fluid">
    <div class="row">
      <div class="col-sm-2">
      {% block sidebar %}
        <ul class="sidebar-nav">
          <li><a href="{% url 'index' %}">Главная страница</a></li>
          <li><a href="">Рассылки</a></li>
          <li><a href="">Результаты опросов</a></li>
          <li><a href="">Данные о студентах</a></li>
        </ul>
     {% endblock %}
      </div>
      <div class="col-sm-10 ">{% block content %}{% endblock %}</div>
    </div>
  </div>
</body>
</html>
{% extends "new_generic.html" %}

{% block title %}
    <h1>Статистика по трудоустройству выпускников СПИНТех</h1>
{% endblock %}

{% block content %}
    <div class="t005__text t-text t-text_md" style="" field="text">
        <h1>Главная страница</h1>
        <p>Добро пожаловать на главную страницу!</p>

        <p> Информационная платформа, позволяющая получать информацию о трудоустройстве выпу
            выпускников института СПИНТех"
        <h2>Общая статистика по сервису</h2>
        <ul>
            <li><strong>Количество обработанных ответов:</strong> {{ num_of_answers }}</li>
            <li><strong>Количество выполненных рассылок:</strong> {{ num_of_completed_mailing }}</li>
            <li><strong>Список поддерживаемых факультетов:</strong> {{ all_faculties }}</li>
            <li><strong>Список поддерживаемых групп:</strong> {{ all_groups }}</li>
        </ul>
    </div>

{% endblock %}
<!DOCTYPE html><html lang=""> <head><meta charset="utf-8" /><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><!--metatextblock--><title>Blank page</title><meta property="og:url" content="http://ddddddsdf.tilda.ws" /><meta property="og:title" content="Blank page" /><meta property="og:description" content="" /><meta property="og:type" content="website" /><meta property="og:image" content="https://static.tildacdn.info/tild3136-3233-4164-b230-353666383637/woodoo.svg" /><link rel="canonical" href="index.html"><!--/metatextblock--><meta property="fb:app_id" content="257953674358265" /><meta name="format-detection" content="telephone=no" /><meta http-equiv="x-dns-prefetch-control" content="on"><link rel="dns-prefetch" href="https://ws.tildacdn.com"><link rel="dns-prefetch" href="https://static.tildacdn.info"><meta name="robots" content="nofollow" /><link rel="shortcut icon" href="https://static.tildacdn.info/img/tildafavicon.ico" type="image/x-icon" /><!-- Assets --><script src="https://stat.tildacdn.com/js/tilda-fallback-1.0.min.js" charset="utf-8" async></script><link rel="stylesheet" href="https://static.tildacdn.info/css/tilda-grid-3.0.min.css" type="text/css" media="all" onerror="this.loaderr='y';"/><link rel="stylesheet" href="http://ddddddsdf.tilda.ws/tilda-blocks-2.14.css?t=1652992230" type="text/css" media="all" onerror="this.loaderr='y';" /><link rel="preconnect" href="https://fonts.gstatic.com"><link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&subset=latin,cyrillic" rel="stylesheet"><link rel="stylesheet" href="https://static.tildacdn.info/css/tilda-animation-1.0.min.css" type="text/css" media="all" onerror="this.loaderr='y';" /><link rel="stylesheet" href="https://static.tildacdn.info/css/tilda-menusub-1.0.min.css" type="text/css" media="print" onload="this.media='all';" onerror="this.loaderr='y';" /><noscript><link rel="stylesheet" href="https://static.tildacdn.info/css/tilda-menusub-1.0.min.css" type="text/css" media="all" /></noscript><script src="https://static.tildacdn.info/js/jquery-1.10.2.min.js" onerror="this.loaderr='y';"></script><script src="https://static.tildacdn.info/js/tilda-scripts-3.0.min.js" onerror="this.loaderr='y';"></script><script src="http://ddddddsdf.tilda.ws/tilda-blocks-2.8.js?t=1652992230" onerror="this.loaderr='y';"></script><script src="https://static.tildacdn.info/js/lazyload-1.3.min.js" charset="utf-8" async onerror="this.loaderr='y';"></script><script src="https://static.tildacdn.info/js/tilda-animation-1.0.min.js" charset="utf-8" async onerror="this.loaderr='y';"></script><script src="https://static.tildacdn.info/js/tilda-menusub-1.0.min.js" charset="utf-8" async onerror="this.loaderr='y';"></script><script src="https://static.tildacdn.info/js/tilda-events-1.0.min.js" charset="utf-8" async onerror="this.loaderr='y';"></script><script type="text/javascript">window.dataLayer = window.dataLayer || [];</script><script type="text/javascript">(function () {
    if((/bot|google|yandex|baidu|bing|msn|duckduckbot|teoma|slurp|crawler|spider|robot|crawling|facebook/i.test(navigator.userAgent))===false && typeof(sessionStorage)!='undefined' && sessionStorage.getItem('visited')!=='y' && document.visibilityState){
        var style=document.createElement('style');
        style.type='text/css';
        style.innerHTML='@media screen and (min-width: 980px) {.t-records {opacity: 0;}.t-records_animated {-webkit-transition: opacity ease-in-out .2s;-moz-transition: opacity ease-in-out .2s;-o-transition: opacity ease-in-out .2s;transition: opacity ease-in-out .2s;}.t-records.t-records_visible {opacity: 1;}}';
        document.getElementsByTagName('head')[0].appendChild(style);
        function t_setvisRecs(){
            var alr=document.querySelectorAll('.t-records');
            Array.prototype.forEach.call(alr, function(el) {
                el.classList.add("t-records_animated");
            });
            setTimeout(function () {
                Array.prototype.forEach.call(alr, function(el) {
                    el.classList.add("t-records_visible");
                });
                sessionStorage.setItem("visited", "y");
            }, 400);
        }
        document.addEventListener('DOMContentLoaded', t_setvisRecs);
    }
})();</script></head>
<body class="t-body" style="margin:0;"><!--allrecords-->
<div id="allrecords" class="t-records" data-hook="blocks-collection-content-node" data-tilda-project-id="5595444"
     data-tilda-page-id="27706980" data-tilda-formskey="9fa856afd0b03a211cf6ecc145595444" data-tilda-lazy="yes">
    <div id="rec447445113" class="r t-rec" style=" " data-animationappear="off" data-record-type="456"><!-- T456 -->
        <div id="nav447445113marker"></div>
        <div id="nav447445113" class="t456 t456__positionstatic " style="background-color: rgba(0,0,0,1); "
             data-bgcolor-hex="#000000" data-bgcolor-rgba="rgba(0,0,0,1)" data-navmarker="nav447445113marker"
             data-appearoffset="" data-bgopacity-two="" data-menushadow="" data-bgopacity="1"
             data-menu-items-align="right" data-menu="yes">
            <div class="t456__maincontainer " style="">
                <div class="t456__leftwrapper" style="min-width:90px;width:90px;">
                    {% block home %}
                    <div><a href="{% url 'index' %}" style="color:#ffffff;">
                        <div class="t456__logo t-title" field="title" style="color:#ffffff;">Трудоустройство СПИНТех</div>
                    </a></div>
                    {% endblock %} #}
                </div>
                <div class="t456__rightwrapper t456__menualign_right" style="">
                    {% block sidebar %}
                    <ul class="t456__list">
                        <li class="t456__list_item" style="padding:0 15px 0 0;"><a class="t-menu__link-item"
                                                                                   href="index.html"
                                                                                   data-menu-submenu-hook=""
                                                                                   style="color:#ffffff;font-weight:600;"
                                                                                   data-menu-item-number="1">Рассылки</a>
                        </li>
                        <li class="t456__list_item" style="padding:0 15px;"><a class="t-menu__link-item"
                                                                               href="index.html"
                                                                               data-menu-submenu-hook=""
                                                                               style="color:#ffffff;font-weight:600;"
                                                                               data-menu-item-number="2">Данные о студентах</a></li>
                        <li class="t456__list_item" style="padding:0 0 0 15px;"><a class="t-menu__link-item"
                                                                                   href="index.html"
                                                                                   data-menu-submenu-hook=""
                                                                                   style="color:#ffffff;font-weight:600;"
                                                                                   data-menu-item-number="3">Статистика</a>
                        </li>
                    </ul>
                    {% endblock %}
                </div>
            </div>
        </div>
        <style>@media screen and (max-width: 980px) {
            #rec447445113 .t456__leftcontainer {
                padding: 20px;
            }
        }

        @media screen and (max-width: 980px) {
            #rec447445113 .t456__imglogo {
                padding: 20px 0;
            }
        }</style>
        <script type="text/javascript">
            t_onReady(function () {
                t_onFuncLoad('t456_highlight', function () {
                    t456_highlight();
                });
            });
            window.addEventListener('resize', function () {
                t_onFuncLoad('t456_setBg', function () {
                    t456_setBg('447445113');
                });
            });
            t_onReady(function () {
                t_onFuncLoad('t456_setBg', function () {
                    t456_setBg('447445113');
                });
            });</script>
        <style>#rec447445113 .t-menu__link-item {
        }

        @supports (overflow:-webkit-marquee) and (justify-content:inherit) {
            #rec447445113 .t-menu__link-item,
            #rec447445113 .t-menu__link-item.t-active {
                opacity: 1 !important;
            }
        }</style>
        <script> t_onReady(function () {
            setTimeout(function () {
                t_onFuncLoad('t_menusub_init', function () {
                    t_menusub_init('447445113');
                });
            }, 500);
        });</script>
        <style>@media screen and (max-width: 980px) {
            #rec447445113 .t-menusub__menu .t-menusub__link-item {
                color: #ffffff !important;
            }

            #rec447445113 .t-menusub__menu .t-menusub__link-item.t-active {
                color: #ffffff !important;
            }
        }</style>
        <!--[if IE 8]>
        <style>#rec447445113 .t456 {
            filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#D9000000', endColorstr='#D9000000');
        }</style><![endif]--></div>
    <div id="rec447445239" class="r t-rec t-rec_pt_45 t-rec_pb_45" style="padding-top:45px;padding-bottom:45px; "
         data-record-type="218"><!-- T005 -->
        <div class="t005">
            <div class="t-container">
                <div class="t-row">
                    <div class="t-col t-col_6 ">{% block content %}{% endblock %}
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="rec447445172" class="r t-rec t-rec_pt_90 t-rec_pb_90"
         style="padding-top:90px;padding-bottom:90px;background-color:#111111; " data-animationappear="off"
         data-record-type="144" data-bg-color="#111111"><!-- T134 -->
        <div class="t134">
            <div class="t-container">
                <div class="t-col t-col_10 t-prefix_1">


                    <div class="t134__descr" field="descr" style="color:#ffffff;"><br/>© All Rights Reserved. Acme
                        Inc.<br/><a href="mailto:hello@mysite.com">shim</a></div>
                </div>
            </div>
        </div>
    </div>
</div><!--/allrecords--><!-- Tilda copyright. Don't remove this line -->

</body>
</html>
from pathlib import Path

from django.shortcuts import render
from django.urls import reverse_lazy
from django.views.generic.edit import CreateView
import openpyxl

from django.conf import settings
from django.conf.urls.static import static
from .models import Upload
class UploadView(CreateView):
    model = Upload
    fields = ['upload_file', ]
    success_url = reverse_lazy('fileupload')
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['documents'] = Upload.objects.all()
        result_str = list()
        for document in context['documents']:
            xslx_file = document.upload_file.name
            wb_obj = openpyxl.load_workbook(Path(settings.MEDIA_ROOT,xslx_file))
            sheet = wb_obj.active
            for row in sheet.iter_rows(max_row=6):
                temp_str = ''
                for cell in row:
                    if type(cell.value) == type(''):
                        temp_str += cell.value + ' '
                result_str.append(temp_str)
        context['result_str'] = result_str
        return context

